// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/s3/s3_client.go

// Package s3_mock is a generated GoMock package.
package s3_mock

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	v4 "github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockS3File is a mock of S3File interface.
type MockS3File struct {
	ctrl     *gomock.Controller
	recorder *MockS3FileMockRecorder
}

// MockS3FileMockRecorder is the mock recorder for MockS3File.
type MockS3FileMockRecorder struct {
	mock *MockS3File
}

// NewMockS3File creates a new mock instance.
func NewMockS3File(ctrl *gomock.Controller) *MockS3File {
	mock := &MockS3File{ctrl: ctrl}
	mock.recorder = &MockS3FileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3File) EXPECT() *MockS3FileMockRecorder {
	return m.recorder
}

// BuildPublicUrl mocks base method.
func (m *MockS3File) BuildPublicUrl(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildPublicUrl", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildPublicUrl indicates an expected call of BuildPublicUrl.
func (mr *MockS3FileMockRecorder) BuildPublicUrl(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPublicUrl", reflect.TypeOf((*MockS3File)(nil).BuildPublicUrl), path)
}

// DeleteFile mocks base method.
func (m *MockS3File) DeleteFile(ctx context.Context, bucketName, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, bucketName, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockS3FileMockRecorder) DeleteFile(ctx, bucketName, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockS3File)(nil).DeleteFile), ctx, bucketName, path)
}

// GetPreSignUrl mocks base method.
func (m *MockS3File) GetPreSignUrl(ctx context.Context, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreSignUrl", ctx, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreSignUrl indicates an expected call of GetPreSignUrl.
func (mr *MockS3FileMockRecorder) GetPreSignUrl(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreSignUrl", reflect.TypeOf((*MockS3File)(nil).GetPreSignUrl), ctx, path)
}

// UploadPrivateFile mocks base method.
func (m *MockS3File) UploadPrivateFile(ctx context.Context, file multipart.File, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPrivateFile", ctx, file, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPrivateFile indicates an expected call of UploadPrivateFile.
func (mr *MockS3FileMockRecorder) UploadPrivateFile(ctx, file, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPrivateFile", reflect.TypeOf((*MockS3File)(nil).UploadPrivateFile), ctx, file, path)
}

// UploadPublicFile mocks base method.
func (m *MockS3File) UploadPublicFile(ctx context.Context, file multipart.File, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPublicFile", ctx, file, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPublicFile indicates an expected call of UploadPublicFile.
func (mr *MockS3FileMockRecorder) UploadPublicFile(ctx, file, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPublicFile", reflect.TypeOf((*MockS3File)(nil).UploadPublicFile), ctx, file, path)
}

// MockS3Client is a mock of S3Client interface.
type MockS3Client struct {
	ctrl     *gomock.Controller
	recorder *MockS3ClientMockRecorder
}

// MockS3ClientMockRecorder is the mock recorder for MockS3Client.
type MockS3ClientMockRecorder struct {
	mock *MockS3Client
}

// NewMockS3Client creates a new mock instance.
func NewMockS3Client(ctrl *gomock.Controller) *MockS3Client {
	mock := &MockS3Client{ctrl: ctrl}
	mock.recorder = &MockS3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Client) EXPECT() *MockS3ClientMockRecorder {
	return m.recorder
}

// DeleteObject mocks base method.
func (m *MockS3Client) DeleteObject(ctx context.Context, params *s3.DeleteObjectInput, optFns ...func(*s3.Options)) (*s3.DeleteObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObject", varargs...)
	ret0, _ := ret[0].(*s3.DeleteObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockS3ClientMockRecorder) DeleteObject(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockS3Client)(nil).DeleteObject), varargs...)
}

// ListObjectsV2 mocks base method.
func (m *MockS3Client) ListObjectsV2(ctx context.Context, params *s3.ListObjectsV2Input, optFns ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectsV2", varargs...)
	ret0, _ := ret[0].(*s3.ListObjectsV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsV2 indicates an expected call of ListObjectsV2.
func (mr *MockS3ClientMockRecorder) ListObjectsV2(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsV2", reflect.TypeOf((*MockS3Client)(nil).ListObjectsV2), varargs...)
}

// PutObject mocks base method.
func (m *MockS3Client) PutObject(ctx context.Context, params *s3.PutObjectInput, optFns ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutObject", varargs...)
	ret0, _ := ret[0].(*s3.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockS3ClientMockRecorder) PutObject(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockS3Client)(nil).PutObject), varargs...)
}

// MockS3PreSign is a mock of S3PreSign interface.
type MockS3PreSign struct {
	ctrl     *gomock.Controller
	recorder *MockS3PreSignMockRecorder
}

// MockS3PreSignMockRecorder is the mock recorder for MockS3PreSign.
type MockS3PreSignMockRecorder struct {
	mock *MockS3PreSign
}

// NewMockS3PreSign creates a new mock instance.
func NewMockS3PreSign(ctrl *gomock.Controller) *MockS3PreSign {
	mock := &MockS3PreSign{ctrl: ctrl}
	mock.recorder = &MockS3PreSignMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3PreSign) EXPECT() *MockS3PreSignMockRecorder {
	return m.recorder
}

// PresignGetObject mocks base method.
func (m *MockS3PreSign) PresignGetObject(ctx context.Context, params *s3.GetObjectInput, optFns ...func(*s3.PresignOptions)) (*v4.PresignedHTTPRequest, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PresignGetObject", varargs...)
	ret0, _ := ret[0].(*v4.PresignedHTTPRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresignGetObject indicates an expected call of PresignGetObject.
func (mr *MockS3PreSignMockRecorder) PresignGetObject(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresignGetObject", reflect.TypeOf((*MockS3PreSign)(nil).PresignGetObject), varargs...)
}

// MockListObjectsV2Pager is a mock of ListObjectsV2Pager interface.
type MockListObjectsV2Pager struct {
	ctrl     *gomock.Controller
	recorder *MockListObjectsV2PagerMockRecorder
}

// MockListObjectsV2PagerMockRecorder is the mock recorder for MockListObjectsV2Pager.
type MockListObjectsV2PagerMockRecorder struct {
	mock *MockListObjectsV2Pager
}

// NewMockListObjectsV2Pager creates a new mock instance.
func NewMockListObjectsV2Pager(ctrl *gomock.Controller) *MockListObjectsV2Pager {
	mock := &MockListObjectsV2Pager{ctrl: ctrl}
	mock.recorder = &MockListObjectsV2PagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListObjectsV2Pager) EXPECT() *MockListObjectsV2PagerMockRecorder {
	return m.recorder
}

// HasMorePages mocks base method.
func (m *MockListObjectsV2Pager) HasMorePages() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMorePages")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMorePages indicates an expected call of HasMorePages.
func (mr *MockListObjectsV2PagerMockRecorder) HasMorePages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMorePages", reflect.TypeOf((*MockListObjectsV2Pager)(nil).HasMorePages))
}

// NextPage mocks base method.
func (m *MockListObjectsV2Pager) NextPage(arg0 context.Context, arg1 ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NextPage", varargs...)
	ret0, _ := ret[0].(*s3.ListObjectsV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextPage indicates an expected call of NextPage.
func (mr *MockListObjectsV2PagerMockRecorder) NextPage(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextPage", reflect.TypeOf((*MockListObjectsV2Pager)(nil).NextPage), varargs...)
}
